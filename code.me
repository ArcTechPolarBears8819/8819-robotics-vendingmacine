/*
  2022 everybot code
  written by carson graf 
  don't email me, @ me on discord
*/

/*
  This is catastrophically poorly written code for the sake of being easy to follow
  If you know what the word "refactor" means, you should refactor this code
*/
// importing all the libraries to be able to read that 
package frc.robot;

import java.sql.DriverAction;

//import com.ctre.phoenix.motorcontrol.ControlMode;
//import com.ctre.phoenix.motorcontrol.VictorSPXControlMode;
//import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax.SoftLimitDirection;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;

import edu.wpi.first.cameraserver.CameraServer;
// import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.PrintCommand;

public class Robot extends TimedRobot {

  // Definitions for the hardware. Change this if you change what stuff you have
  // plugged in
  // identification for each one giving it a variable name
  CANSparkMax intake = new CANSparkMax(6, MotorType.kBrushed);
  CANSparkMax driveLeftA = new CANSparkMax(1, MotorType.kBrushed);
  CANSparkMax driveLeftB = new CANSparkMax(3, MotorType.kBrushed);
  CANSparkMax driveRightA = new CANSparkMax(2, MotorType.kBrushed);
  CANSparkMax driveRightB = new CANSparkMax(4, MotorType.kBrushed);
  CANSparkMax arm = new CANSparkMax(5, MotorType.kBrushless);
  private RelativeEncoder armEncoder;
  float armUpperLimit = 0;
  float armLowerLimit = -92;
  double armEncoderThreshold = 2;
  XboxController driverController = new XboxController(1);

  // Varibles needed for the code
  double autoStart = 0;
  boolean goForAuto = false;

  double armPower = 0;


  /**
   * This function is run when the robot is first started up and should be used
   * for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    // Configure motors to turn correct direction. You may have to invert some of
    // your motors
    // opposite to make sure it goes foward
    driveLeftA.setInverted(false);
    driveLeftA.burnFlash();
    driveLeftB.setInverted(false);
    driveLeftB.burnFlash();
    driveRightA.setInverted(true);
    driveRightA.burnFlash();
    driveRightB.setInverted(true);
    driveRightB.burnFlash();

    arm.setInverted(false);
    arm.setIdleMode(IdleMode.kBrake);
    arm.setSoftLimit(SoftLimitDirection.kForward, armUpperLimit);
    arm.setSoftLimit(SoftLimitDirection.kReverse, armLowerLimit);

    arm.burnFlash();

    CameraServer.startAutomaticCapture();

    // // add a thing on the dashboard to turn off auto if needed
    // SmartDashboard.putBoolean("Go For Auto", false);
    // goForAuto = SmartDashboard.getBoolean("Go For Auto", false);

    armEncoder = arm.getEncoder();
  }

  @Override
  public void autonomousInit() {
    // get a time for auton start to do events based on time later
    autoStart = Timer.getFPGATimestamp();
    // check dashboard icon to ensure good to do auto
    // goForAuto = SmartDashboard.getBoolean("Go For Auto", false);
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    // get time since start of auto
    double autoTimeElapsed = Timer.getFPGATimestamp() - autoStart;
    // if(goForAuto){
    // series of timed events making up the flow of auto
    if (autoTimeElapsed < 3) {
      // spit out the ball for three seconds
      intake.set(-1);
    } else if (autoTimeElapsed < 6) {
      // stop spitting out the ball and drive backwards *slowly* for three seconds
      intake.set(0);
      driveLeftA.set(0.3);
      driveLeftB.set(0.3);
      driveRightA.set(0.3);
      driveRightB.set(0.3);
    } else {
      // do nothing for the rest of auto
      intake.set(0);
      driveLeftA.set(0);
      driveLeftB.set(0);
      driveRightA.set(0);
      driveRightB.set(0);
    }
  }

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {

    intake.set(0);
    driveLeftA.set(0);
    driveLeftB.set(0);
    driveRightA.set(0);
    driveRightB.set(0);

  }

  /** This function is called periodically during operator control. */
  double driveLeftPower = 0;
  double driveRightPower = 0;

  @Override
  public void teleopPeriodic() {
    double acc_rate = .03;
    // Set up arcade steer

    double forward = driverController.getLeftY();
    double turn = driverController.getRightX();

    SmartDashboard.putNumber("Encoder", armEncoder.getPosition());

    // SmartDashboard.putNumber("Forward", forward);
    // SmartDashboard.putNumber("Turn", turn);

    // Change in speed to assist the driver during climbing
    boolean slowButton = driverController.getLeftBumper();
    double speed_multiplier = 1;

    if (slowButton) {
      speed_multiplier = 0.2;
    } else {
      speed_multiplier = 5;
    }

    double targetLeftPower = forward - turn;
    double targetRightPower = forward + turn;

    // SmartDashboard.putNumber("Target Left", targetLeftPower);
    // SmartDashboard.putNumber("Target Right", targetRightPower);

    if (targetLeftPower < 0) {
      if (driveLeftPower > targetLeftPower) {
        driveLeftPower = driveLeftPower - acc_rate;
      } else
        driveLeftPower = targetLeftPower;
    }
    if (targetLeftPower > 0) {
      if (driveLeftPower < targetLeftPower) {
        driveLeftPower = driveLeftPower + acc_rate;
      } else
        driveLeftPower = targetLeftPower;
    }

    if (targetRightPower < 0) {
      if (driveRightPower > targetRightPower) {
        driveRightPower = driveRightPower - acc_rate;
      } else
        driveRightPower = targetRightPower;
    }
    if (targetRightPower > 0) {
      if (driveRightPower < targetRightPower) {
        driveRightPower = driveRightPower + acc_rate;
      } else
        driveRightPower = targetRightPower;
    }

    // SmartDashboard.putNumber("Drive Left", driveLeftPower);
    // SmartDashboard.putNumber("Drive Right", driveRightPower);

    driveLeftA.set(driveLeftPower * speed_multiplier);
    driveLeftB.set(driveLeftPower * speed_multiplier);
    driveRightA.set(driveRightPower * speed_multiplier);
    driveRightB.set(driveRightPower * speed_multiplier);

    // Intake controls
    //if (driverController2.getRightBumper()) {
    //  intake.set(.5);
     // arm.set(-.5);
    //} else if (driverController2.getLeftBumper()) {
     // intake.set(-1);
    //} else {
     // intake.set(0);
    //}
    //if (driverController2.getXButtonPressed()) {
     // double targetArmPowerUp = 1;
      //ouble armACC = 0.05;
      //armPower = 0;
      //while (armPower < targetArmPowerUp) {
       // armPower = armPower + armACC;
        //SmartDashboard.putNumber("Arm Power", armPower);
        //arm.set(armPower);
      //}
    // else if (driverController2.getYButtonPressed()) {
      //double targetArmPowerDown = -.5;
      //double armACC = 0.05;
      //armPower = 0;
      //while (armPower > targetArmPowerDown) {
        //armPower = armPower - armACC;
        //SmartDashboard.putNumber("Arm Power", armPower);
   ///   }
    //}
    //arm.set(armPower);

    // } else if (armEncoder.getPosition() >= (armUpperLimit-armEncoderThreshold) ||
      // armEncoder.getPosition() <= (armLowerLimit+armEncoderThreshold)){
      // armPower = 0;
      // SmartDashboard.putNumber("Arm Power", armPower);
    // }
  }

  @Override
  public void disabledInit() {
    // On disable turn off everything
    // done to solve issue with motors "remembering" previous setpoints after
    // reenable
    // once the robot is diabiled everythhing will stop
    driveLeftA.set(0);
    driveLeftB.set(0);
    driveRightA.set(0);
    driveRightB.set(0);
    arm.set(0);
    intake.set(0);
  }

}
